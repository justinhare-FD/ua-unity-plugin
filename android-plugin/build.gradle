import java.util.regex.Pattern

apply plugin: 'android-library'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs 'aars'
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23

        manifestPlaceholders = [unityPackageName:androidApplicationId]
    }
}

dependencies {
    compile files('libs/classes.jar')
    compile 'com.urbanairship:urbanairship-lib:+@aar'
}


def getAndroidSDKDir() {
    // From gradle.properties
    if (project.hasProperty('androidSDKDir')) {
        return androidSDKDir;
    }

    // Try to get the Android SDK directory from local.properties file
    File localPropertiesFile = new File(project.rootDir, "local.properties")
    if (localPropertiesFile.exists()) {
        def localProperties = new Properties()
        localProperties.load(localPropertiesFile.newDataInputStream())

        def sdkDir = localProperties.getProperty("sdk.dir");
        if (sdkDir != null) {
            return sdkDir;
        }
    }

    return System.getenv("ANDROID_HOME")
}

task cleanPlugin(type: Delete) {
    delete "$buildDir/unity-plugin"
}

def convertAar(String aarPath, String destinationPath) {
    // Unpack the resources and classes.jar
    copy {
        from zipTree(file(aarPath))
        into file(destinationPath)
        include "res/**", "classes.jar"
    }

    // Unpack the manifest and do applicationId placeholders
    copy {
        from zipTree(file(aarPath))
        into file(destinationPath)
        include "AndroidManifest.xml"

        if (shouldSwapKeys)
        {
          filter { String line ->
              line.replaceAll(Pattern.quote("\${applicationId}"), androidApplicationId)
          }
        }
    }

    // Move the classes.jar file into the libs directory. Exclude Manifest*.class files.
    task(destinationPath, type: Jar) {
        from zipTree(file("$destinationPath/classes.jar"))
        destinationDir file("$destinationPath/libs")
        archiveName "${file(destinationPath).name}.jar"
        exclude '**/Manifest.class', '**/Manifest$*.class'
    }.execute()

    // Generate a Project.properties file
    def propertiesFile = file("$destinationPath/project.properties")
    propertiesFile.text = "target=android-21\n"
    propertiesFile.text += "android.library=true"

    // Delete the classes.jar
    delete "$destinationPath/classes.jar"
}

task packagePlugin <<  {

    // Get the Android SDK directory.
    def sdkDir = getAndroidSDKDir()
    if (sdkDir == null) {
        throw new StopExecutionException("Unable to locate Android SDK directory.");
    }

    // Convert the SDK
    convertAar("aars/urbanairship-lib-6.3.0.aar", "$buildDir/unity-plugin/Assets/Plugins/Android/urbanairship-lib")

    // Convert the plugin
    convertAar("$buildDir/outputs/aar/android-plugin-release.aar", "$buildDir/unity-plugin/Assets/Plugins/Android/ua-unity-plugin-lib")

    // Copy the Google Play Services library project from the Android SDK dir
    copy {
        from file("$sdkDir/extras/google/google_play_services/libproject/google-play-services_lib")
        into file("$buildDir/unity-plugin/Assets/Plugins/Android/google-play-services-lib")
    }

    // Copy support library v4 jar from the Android SDK dir
    copy {
        from file("$sdkDir/extras/android/support/v4/android-support-v4.jar")
        into file("$buildDir/unity-plugin/Assets/Plugins/Android")
    }

    // Copy the airshipconfig.properties
    copy {
        from file("airshipconfig.properties")
        into file("$buildDir/unity-plugin/Assets/Plugins/Android/assets")
        if (shouldSwapKeys)
        {
          filter { String line ->
              line.replaceAll(Pattern.quote("GCM_SENDER"), gcmSender)
                  .replaceAll(Pattern.quote("APP_KEY"), appKey)
                  .replaceAll(Pattern.quote("APP_SECRET"), appSecret)
          }
        }
    }

    // Copy the main AndroidManifest.xml
    copy {
        from file("AndroidManifest.xml")
        into file("$buildDir/unity-plugin/Assets/Plugins/Android")

        if (shouldSwapKeys) {
          filter { String line ->
              // Unity does not support applicationId placeholders
              line.replaceAll(Pattern.quote("\${applicationId}"), androidApplicationId)
          }
        }
    }
}

packagePlugin.dependsOn('cleanPlugin')
assemble.dependsOn packagePlugin
